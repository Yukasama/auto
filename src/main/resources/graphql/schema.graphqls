schema {
  query: Query
  mutation: Mutation
}

"Suche nach Autos"
type Query {
  "Suche Auto anhand der ID"
  auto(id: ID!): Auto

  "Suche Auto anhand Suchkriterien"
  autos(input: Suchkriterien): [Auto!]
}

"Neuanlegen und Ändern von Autos"
type Mutation {
  "Ein neues Auto anlegen"
  create(input: AutoInput!): CreatePayload
}

"Schema eines Autos"
type Auto {
  id: ID
  name: String!
  marke: String!
  kennzeichen: String!
  pferdeStaerke: Int!
  preis: String!
  besitzer: Besitzer!
  reparaturen(first: Int!): [Reparatur!]
}

"Schema eines Besitzers eines Autos"
type Besitzer {
  id: ID
  vorname: String!
  nachname: String!
}

"Schema einer Reparatur eines Autos"
type Reparatur {
  id: ID
  beschreibung: String!
  datum: String!
  kosten: String!
}

"Suchkriterien für das Filtern von Autos"
input Suchkriterien {
  name: String
  marke: String
  reparatur: String
}

"Input für ein Auto"
input AutoInput {
  name: String!
  marke: MarkeType!
  kennzeichen: String!
  pferdeStaerke: Int!
  preis: String!
  besitzer: BesitzerInput!
  reparaturen: [ReparaturInput!]
}

"Enum für Marke eines Autos"
enum MarkeType {
  VOLKSWAGEN
  MERCEDES
  FORD
  TESLA
}

"Input für einen Besitzer eines Autos"
input BesitzerInput {
  vorname: String!
  nachname: String!
}

"Input für eine Reparatur eines Autos"
input ReparaturInput {
  beschreibung: String!
  datum: String!
  kosten: String!
}

"Rückgabetyp beim Neuanlegen eines Autos"
type CreatePayload {
  id: String!
}
